
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecs@4.0.0
  aws-cli: circleci/aws-cli@1.0.0

jobs:
  build-and-test:
    executor: aws/default
    docker:
      - image: circleci/python:3.7-stretch-browsers
        auth:
          username: smilingbuddha81
          password: $DOCKER_HUB_PASSWORD_USER
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=${DOCKER_IMAGE_NAME}' >> $BASH_ENV
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            . venv/bin/activate
            python -m pytest -v tests/test_script.py
      - store_artifacts:
          path: test-reports/
          destination: tr1
      - store_test_results:
          path: test-reports/
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push Docker image
          command: |
            docker build -t $DOCKERHUB_USER/$IMAGE_NAME:$TAG .
            echo $DOCKER_HUB_PASSWORD_USER | docker login -u $DOCKERHUB_USER --password-stdin
            docker push $DOCKERHUB_USER/$IMAGE_NAME:$TAG
  deploy:
    executor:
      name: aws-cli/default
    steps:
      - checkout
      - run:
          name: Storing previous commit
          command: |
            git rev-parse HEAD > ./commit.txt
      - aws/install
      - run:
          name: Configure AWS credentials
          command: |
            echo '[default]' > ~/.aws/credentials
            echo 'aws_access_key_id = $AWS_ACCESS_KEY_ID' >> ~/.aws/credentials
            echo 'aws_secret_access_key = $AWS_SECRET_ACCESS_KEY' >> ~/.aws/credentials
      - run:
          name: Deploying Docker container
          command: |
            aws ecs update-service \
              --service "<AWS_ECS_SERVICE_NAME>" \
              --cluster "<AWS_ECS_CLUSTER_NAME>" \
              --force-new-deployment

workflows:
  build-test-deploy:
    jobs:
      - build-and-test
      - deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main